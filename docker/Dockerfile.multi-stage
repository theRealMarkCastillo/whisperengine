# Multi-stage Dockerfile for production optimization
FROM python:3.13-slim AS base

# Build arguments for flexible configuration
ARG SYSTEM_PROMPT_SOURCE=prompts/default.md

# Environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    TOKENIZERS_PARALLELISM=false \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    gcc g++ git curl ffmpeg wget netcat-traditional procps \
    libopus-dev libffi-dev libnacl-dev libssl-dev \
    && rm -rf /var/lib/apt/lists/* \
    && pip install --upgrade pip

# ============================================================================
# Development stage
FROM base AS development

# Copy dependency files for better layer caching
COPY requirements-core.txt requirements-platform.txt requirements-discord.txt requirements-vector-memory.txt ./
COPY requirements-dev.txt* ./

# Install dependencies with cache mount
RUN --mount=type=cache,target=/root/.cache/pip \
    pip install -r requirements-core.txt && \
    pip install -r requirements-platform.txt && \
    pip install -r requirements-discord.txt && \
    pip install -r requirements-vector-memory.txt && \
    if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi && \
    python -m spacy download en_core_web_sm

# Copy all source code (for development)
COPY . .

# Create user and directories
RUN useradd --create-home appuser && \
    mkdir -p chromadb_data backups privacy_data temp_images logs && \
    chown -R appuser:appuser /app

USER appuser

# Development command with hot-reload
CMD ["sh", "-c", "python validate_config.py && python run.py"]

# ============================================================================
# Production stage (optimized)
FROM base AS production

# Copy dependency files for better layer caching
COPY requirements-core.txt requirements-platform.txt requirements-discord.txt requirements-vector-memory.txt ./

# Install Python dependencies with cache mount for faster builds
RUN --mount=type=cache,target=/root/.cache/pip \
    pip install --no-cache-dir -r requirements-core.txt && \
    pip install --no-cache-dir -r requirements-platform.txt && \
    pip install --no-cache-dir -r requirements-discord.txt && \
    pip install --no-cache-dir -r requirements-vector-memory.txt && \
    python -m spacy download en_core_web_sm

    # Copy model download script and download all models during build
    COPY scripts/download_models.py ./scripts/
    # Use VADER-only emotion analysis (no PyTorch required)
    ENV ENABLE_ROBERTA_EMOTION=false
    RUN python scripts/download_models.py

    # Set environment variables for offline model usage
    ENV SENTENCE_TRANSFORMERS_HOME=/app/models \
        TRANSFORMERS_CACHE=/app/models \
        HF_HOME=/app/models \
        TORCH_HOME=/app/models

    # Copy only necessary application files
    COPY src/ ./src/
    COPY pyproject.toml validate_config.py env_manager.py run.py ./
    COPY prompts/ ./prompts/
    COPY config/ ./config/
    COPY data/ ./data/

    # Create non-root user and directories
RUN useradd --create-home --no-log-init appuser && \
    mkdir -p backups privacy_data temp_images logs && \
    chown -R appuser:appuser /app && \
    # Remove unnecessary packages after installation (keep wget, netcat, and procps for health checks)
    apt-get autoremove -y gcc g++ git && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

USER appuser

# Health check - verify the main Python process is running
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD pgrep -f "python.*run" > /dev/null || exit 1

# Production command
CMD ["sh", "-c", "python validate_config.py && python run.py"]

# ============================================================================
# Minimal/End-user stage (even smaller)
FROM python:3.13-slim AS minimal

ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    TOKENIZERS_PARALLELISM=false

WORKDIR /app

# Install minimal dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    gcc g++ libffi-dev libssl-dev \
    ffmpeg libopus-dev wget netcat-openbsd procps && \
    pip install --upgrade pip

# Copy dependency files for better layer caching
COPY requirements-core.txt requirements-platform.txt requirements-discord.txt ./

# Install dependencies in stages for better error tracking
RUN pip install --no-cache-dir -r requirements-core.txt && \
    pip install --no-cache-dir -r requirements-platform.txt && \
    pip install --no-cache-dir -r requirements-discord.txt && \
    python -m spacy download en_core_web_sm && \
    apt-get remove -y gcc g++ libffi-dev libssl-dev && \
    apt-get autoremove -y && apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Copy application
COPY src/ ./src/
COPY validate_config.py env_manager.py run.py ./
COPY prompts/ ./prompts/
COPY config/ ./config/
COPY data/ ./data/
COPY ${SYSTEM_PROMPT_SOURCE} ./system_prompt.md

# Create user
RUN adduser -D -s /bin/sh appuser && \
    mkdir -p chromadb_data backups privacy_data temp_images logs && \
    chown -R appuser:appuser /app

USER appuser

CMD ["sh", "-c", "python validate_config.py && python run.py"]
