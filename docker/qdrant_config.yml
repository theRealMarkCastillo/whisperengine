# Qdrant Docker Configuration for WhisperEngine
# This file contains recommended configurations for using Qdrant with proper data persistence

# 1. DEVELOPMENT ENVIRONMENT (BIND MOUNT)
# Modify docker-compose.dev.yml to use this configuration

version: '3.8'

services:
  # Qdrant for development with bind mount
  qdrant:
    image: qdrant/qdrant:v1.6.1
    container_name: whisperengine-qdrant
    restart: unless-stopped
    environment:
      - QDRANT__SERVICE__GRPC_PORT=6334
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__LOG_LEVEL=INFO
    volumes:
      # Bind mount for direct access to data
      - ./data/qdrant:/qdrant/storage
    ports:
      - "6333:6333"  # HTTP API
      - "6334:6334"  # gRPC API
    networks:
      - bot_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:6333/health || exit 1"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 30s

# 2. PRODUCTION ENVIRONMENT (EXPLICIT VOLUME)
# Add this to docker-compose.prod.yml to replace ChromaDB

  # Qdrant for vector storage - Production configuration
  qdrant:
    image: qdrant/qdrant:v1.6.1
    container_name: whisperengine-qdrant
    restart: unless-stopped
    environment:
      - QDRANT__SERVICE__GRPC_PORT=6334
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__LOG_LEVEL=INFO
    volumes:
      # Explicit volume with external flag
      - type: volume
        source: qdrant_data
        target: /qdrant/storage
    ports:
      - "6333:6333"  # HTTP API
      - "6334:6334"  # gRPC API
    networks:
      - bot_network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:6333/health || exit 1"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 30s

volumes:
  qdrant_data:
    name: whisperengine-qdrant-data
    external: true

# 3. DISTRIBUTED DEPLOYMENT (NFS/CLOUD STORAGE)
# For multi-node deployments

  # Qdrant with NFS storage
  qdrant_nfs:
    image: qdrant/qdrant:v1.6.1
    container_name: whisperengine-qdrant
    restart: unless-stopped
    environment:
      - QDRANT__SERVICE__GRPC_PORT=6334
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__LOG_LEVEL=INFO
    volumes:
      # NFS volume configuration
      - type: volume
        source: qdrant_data_nfs
        target: /qdrant/storage
        volume:
          driver_opts:
            type: nfs
            o: "addr=nfs-server.example.com,rw,soft,intr"
            device: ":/export/whisperengine/qdrant"
    networks:
      - bot_network

# BACKUP AND RESTORE SCRIPT
# Save this in scripts/backup_qdrant.sh

# #!/bin/bash
#
# # Backup script for Qdrant vector database
# 
# # Configuration
# BACKUP_DIR="./backups/qdrant"
# DATE=$(date +%Y%m%d_%H%M%S)
# BACKUP_FILE="${BACKUP_DIR}/qdrant_backup_${DATE}.tar.gz"
# 
# # Create backup directory if it doesn't exist
# mkdir -p $BACKUP_DIR
# 
# # For bind mount setup
# if [ -d "./data/qdrant" ]; then
#   echo "Creating backup of Qdrant data from bind mount..."
#   tar -czf $BACKUP_FILE ./data/qdrant
#   echo "Backup created at $BACKUP_FILE"
# else
#   # For Docker volume setup
#   echo "Creating backup of Qdrant data from Docker volume..."
#   docker run --rm -v whisperengine-qdrant-data:/data -v $(pwd)/$BACKUP_DIR:/backup \
#     alpine sh -c "cd /data && tar -czf /backup/qdrant_backup_${DATE}.tar.gz ."
#   echo "Backup created at $BACKUP_FILE"
# fi
# 
# # To restore:
# # mkdir -p ./data/qdrant
# # tar -xzf $BACKUP_FILE -C ./data/qdrant
# # Or for volumes:
# # docker run --rm -v whisperengine-qdrant-data:/data -v $(pwd)/$BACKUP_DIR:/backup \
# #   alpine sh -c "rm -rf /data/* && tar -xzf /backup/qdrant_backup_${DATE}.tar.gz -C /data"